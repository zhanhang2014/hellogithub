<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hang&#39;s Blog</title>
    <description>关于前端与设计、黑客与画家 | 詹航，Web &amp; Mobile Lover，Front-End Engineer，UX Designer | 这里是 @Zhanhang詹航 的个人博客，与你一起发现更大的世界。</description>
    <link>http://zhanhang2014.github.io/</link>
    <atom:link href="http://zhanhang2014.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 25 Sep 2016 00:56:00 +0800</pubDate>
    <lastBuildDate>Sun, 25 Sep 2016 00:56:00 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>碎片</title>
        <description>&lt;p&gt;碎片&lt;/p&gt;

&lt;p&gt;对听到的节奏无动于衷&lt;/p&gt;

&lt;p&gt;实在是一种艰难而不易察觉的抵抗&lt;/p&gt;

&lt;p&gt;你希望心中的旋律得以保留&lt;/p&gt;

&lt;p&gt;你希望随周围的人一起摇摆&lt;/p&gt;

&lt;p&gt;你都无法做到&lt;/p&gt;

&lt;p&gt;因为你不愿丢弃的太多、太隐秘&lt;/p&gt;

&lt;p&gt;因为你感受得太多、太浅薄&lt;/p&gt;

&lt;p&gt;你总是轻易地面带微笑&lt;/p&gt;

&lt;p&gt;你总是独自承受无关紧要的负面情绪&lt;/p&gt;

&lt;p&gt;你早就学会了躲藏&lt;/p&gt;

&lt;p&gt;你正在练习像别人敞开怀抱&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 08:49:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/09/24/shard/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/09/24/shard/</guid>
        
        <category>记事本</category>
        
        
      </item>
    
      <item>
        <title>朗读者志愿者</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;今天去文汇小学做了第一次朗读者志愿服务的助教。两周前报名参加的这个活动，那个时候有专门的公益组织派老师来给我们做了关于朗读技巧和儿童教育方面的培训。&lt;/p&gt;

&lt;p&gt;到场听培训的大多是自家小孩正好在小学二三年级的同事们，也听他们讲了不少带孩子的心得体会。想到自己这个实习生也来凑热闹，我就偷偷笑话自己。&lt;/p&gt;

&lt;p&gt;不过还是觉得很有趣。&lt;/p&gt;

&lt;p&gt;中午吃完饭，公司的班车接我们到学校。大概半小时的车程。我报名的是二年级组，组长是Kaixuan，我和Grace算这次的助教。老实说我什么都不会，这一次也没有准备，就这么上了班车。&lt;/p&gt;

&lt;p&gt;文汇小学是一所外来务工子弟学校。培训的老师说，那里的孩子，他们的父母可能不太重视培养孩子的阅读兴趣，或者忙于生计，不太会给孩子读故事。来做志愿者的同事们也表示，给自己的孩子读故事，是一件多么幸福的事。小孩子能多听到一些故事当然是好的。我试图努力回想了一下，小学二三年级的自己，会因为听不到故事而感到不幸吗？&lt;/p&gt;

&lt;p&gt;我不太清楚了，不过我想我会喜欢这个活动。&lt;/p&gt;

&lt;p&gt;很久没走进这样小学二年级的教室了，喧闹、活泼。我很佩服我的同事们。Kaixuan的儿子今年正好也上二年级，看得出他蛮有经验，也是有认真准备用心给孩子们讲绘本的故事的。大大的微笑挂在他的脸上，温和耐心地引导孩子们回答问题，故事的衔接过渡也提前设计了方案。我实在是欣赏这种认真细致的态度。Grace更年长一些，是婶婶级的存在，很有气场的。每次互动场面过于热烈的时候，Grace总能恰如其分地控制住场面。就只有我，在孩子们的目光中还略微有些不适应，笑容都有点儿生硬吧。&lt;/p&gt;

&lt;p&gt;所以说，这次我并没帮上太多忙。到后半段的时候就基本在教室后面拍照和观察孩子们了。有一直很乖的孩子，也有常常开小差的孩子，总的说来他们的纪律不算太好，但在Kaixuan朗读故事的时候，大部分孩子还是很专注地在听。而一旦和他们互动一下，现场就会变得很热烈。&lt;/p&gt;

&lt;p&gt;我在最后面看到，坐在教室不同位置的小孩的表现还是有很明显的分化。越坐得靠后，孩子的注意力就越不集中。这也是可以理解的。这里面，最后一排穿粉色衣服的小女孩特别让我在意。我们刚进教室的时候，她径直从最后一排走上讲台来帮我们调PPT，而提供的是个错误的方法，同学们并没给她什么好评。同在最后一排，其他小孩虽然也显得不那么集中注意力，但她则更甚：要么动作幅度很大地喝水，要么就拿书或手绢捂住自己的头，还好几次钻到书桌下面蜷成一团。我不知道该怎么办，是不要在意呢，还是去提醒她一下呢？是温柔一点儿呢，还是严厉一些呢？不管她我有点儿于心不忍，关注太多会不会影响Kaixuan的朗读呢？&lt;/p&gt;

&lt;p&gt;我半犹豫着欠过身去，小声说让她听故事。小姑娘没怎么理睬我，我也就只好悻悻而返。后来，Grace也注意到了这个小女孩，她蹲下身去，一边用手轻轻抚着女孩的头一边问她怎么了。Grace问完女孩，又和她旁边的小男孩说了些话。整个班级并没有怎么在意最后一排这边的情况，那女孩后来也乖巧了很多。我们顺利完成了这次朗读，离开的时候，孩子们的告别都那么热情。&lt;/p&gt;

&lt;p&gt;返回公司的途中我问了Grace那个女孩的事，她说是因为旁边的男孩欺负了她，Grace让那个男孩给她了道歉。这个时候我就觉得自己十分笨拙，不懂得怎么去了解别人的立场和情绪，哪怕是那么小的小孩。现在的我很佩服像Grace这样，可以去调解一些自身以外的矛盾。那大概是年纪、修养和女性的光辉带来的吧，我很想向她学我能够学到的部分。不过我想，自己二年级那么大的时候，是比较怕这样的大人的：他们有入侵自己小小世界的技巧，自己完全招架不住。&lt;/p&gt;

&lt;p&gt;这个活动对我来说，还蛮有意义的。倒不是说我有颗多么公益的心。能和优秀的同事一起做点什么很是开心，也希望自己的眼里能包容得下好与坏。而且每两周能花几个小时投入一些非技术的事情，学习内核和网络协议的效率也会变高吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-09-23/01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 18:00:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/09/23/volunteer/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/09/23/volunteer/</guid>
        
        <category>记事本</category>
        
        
      </item>
    
      <item>
        <title>Wild Horses</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;7月22日，就是明天， Bojack Horseman 要出第三季了。起初看这部美漫是因为听到了这首片尾曲 Wild Horse，70年代滚石的老歌。&lt;/p&gt;

&lt;embed src=&quot;http://music.163.com/style/swf/widget.swf?sid=26714023&amp;amp;type=2&amp;amp;auto=0&amp;amp;width=320&amp;amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot; allownetworking=&quot;all&quot; /&gt;

&lt;p&gt;“这应该值得看一看”，听歌的时候我这么想。然后前两季我都看了两遍，很多细节第一遍是没在意过来的。我尽量不讲剧情直接相关的内容，最好能写成一张文字海报，提供一个第一印象和整体感受。&lt;/p&gt;

&lt;p&gt;看 Bojack Horseman 最直接的感受就是这剧很幽默，同时也很抑郁。美式幽默贯穿始终，加上卡通的形式还有动物与人共存的设定。虽然我觉得自己对好莱坞啊，美国流行乐坛啊，俚语啊等等这些美国本土化的东西不够了解错过了很多搞笑的地方，但还是觉得笑点不断。
而这部剧的主题确实是偏抑郁的。创作者本人 Raphael Bob-Waksberg 说，他刚从纽约搬到洛杉矶的时候，住在朋友的朋友的朋友的好莱坞大别墅里，却感觉非常孤独：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I remember standing out on this deck and looking out over Hollywood and feeling like, 
“Oh my god, I am on top of the world. But I’ve never been more lonely and isolated.” 
And from that sort of sprung the idea for this character who had gotten every 
opportunity but still can’t find a way to be happy. And that was BoJack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;细致也是这部剧的一大特点，这体现在情节的连贯与一致、人物设定的精心考虑、背景细节的布置和影射，大概还包括为动画里以卡通人物或动物形象出场的名人的真人配音吧。发现这些细节总是让人暗暗赞叹或是会心一笑。考究起来实在是太多了，有兴趣可以看看知乎&lt;a href=&quot;http://zhihu.com/question/26953984/answer/90087683&quot;&gt;如何评价动画《马男波杰克》？——Kristofferson的答案&lt;/a&gt;和这个问题下的其他答案以及&lt;a href=&quot;https://en.wikipedia.org/wiki/BoJack_Horseman#Celebrities&quot;&gt;wiki&lt;/a&gt;里介绍出场名人的部分。&lt;/p&gt;

&lt;p&gt;还有我觉得整部剧的品味不错，比如动物化的角色特点都恰如其分，比如配乐和剧情配合得很好，再比如背景里常常出现对一些名画（我基本都不认识）的模仿或调侃。还有很重要的一点是——可能这里我要稍微提一下剧情了——对于一本好书，或者一个演员成名前后的变化，剧集里面是有细致刻画的，我只想说编剧你懂得真多。&lt;/p&gt;

&lt;p&gt;最后说下这部剧的深刻。实际上 Bojack Horseman 可能一直在力求不要深刻。一讲到有道理的话语速就加倍，严肃的话题总是用荒诞的情景来展开。感觉就是：道理我都懂，可是又有什么用呢？又或者是这个剧想要尽量真诚地去展现，而把解读的权利留给观众吧。我很喜欢第二季开头 Bojack 和 Diane 在屋顶上的对话：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-21/01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cartoonbrew.com/interviews/behind-bojack-horseman-with-creator-raphael-bob-waksberg-and-director-mike-hollingsworth-103565.html&quot;&gt;cartoonbrew-Behind “BoJack Horseman” With Its Creator and Supervising Director&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26953984?rf=31172267&quot;&gt;知乎-如何评价动画《马男波杰克》？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BoJack_Horseman&quot;&gt;wiki-BoJack Horseman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/af224af76314&quot;&gt;简书-致郁的成人幽默 - Bojack Horseman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vulture.com/2014/09/bojack-horsemans-radically-funny-sadness.html#&quot;&gt;vulture-BoJack Horseman Is the Funniest Show About Depression Ever&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vulture.com/2015/07/bojack-horseman-season-two-raphael-bob-waksberg.html?mid=twitter_vulture&quot;&gt;vulture-BoJack Horseman Creator Raphael Bob-Waksberg on the Show’s Second Season&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.newyorker.com/culture/cultural-comment/bojack-horseman-and-the-comedy-of-despair&quot;&gt;The New Yorker-“BOJACK HORSEMAN” AND THE COMEDY OF DESPAIR&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 18:39:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/07/21/Wild-Horses/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/07/21/Wild-Horses/</guid>
        
        <category>观影</category>
        
        
      </item>
    
      <item>
        <title>Instagram 插画推荐</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;首先这里应该写的是：&lt;/p&gt;

&lt;p&gt;多图预警！多图预警！多图预警！&lt;/p&gt;

&lt;p&gt;这篇博客我来整理一下我在 Instagram 上关注的插画家们。我自己有时也画一点儿，我刷 Ins 上的画有点像是用音乐 App 淘歌一样，慢慢就关注了好多辨识度蛮强的插画家。就挑一部分来写写自己的感受吧。&lt;/p&gt;

&lt;h2 id=&quot;marutibitamin&quot;&gt;maruti_bitamin&lt;/h2&gt;

&lt;p&gt;这是一位住在多伦多的日本插画家，形容一下她的画风简直就是可爱的幽灵。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/01.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;她画的人物表情通常都比较淡：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;题材多包括幽灵啦：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/03.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;植物花儿啦：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;昆虫动物啦：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总之题材很丰富。内容有时充实繁复：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/07.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/08.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时简单也很打动人：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/09.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就连工作台也收拾得很像她的画：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/maruti_bitamin/11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;她有一个自己的&lt;a href=&quot;http://koyamori.tictail.com/&quot;&gt;网站&lt;/a&gt;卖一些创作周边。
可惜在多伦多，不然我真想买一些。&lt;/p&gt;

&lt;h2 id=&quot;pencilballad&quot;&gt;pencilballad&lt;/h2&gt;

&lt;p&gt;这是一位主要画铅笔画的韩国的插画家，可以说她的线条相对来说还蛮简单的。
特点是型准，堪比相机。她的有些画让人觉得像是照片提出的轮廓一样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表情的细腻捕捉得很好，这主要体现在眼睛和嘴唇刻画上。人物的头发笔触干练，光影赏心悦目。她喜欢特别画一画鼻子，这个我感觉还不多见的(我贴的这几张好像体现不明显)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时，她会给自己的画一些简单配色(她也有少量水彩画我就不贴了)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/06.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时，她会给自己的画配上一束花或是一个小物件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/pencilballad/08.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;她的&lt;a href=&quot;http://www.grafolio.com/pencilballad&quot;&gt;作品集&lt;/a&gt;也是可以访问到的哦。&lt;/p&gt;

&lt;h2 id=&quot;cristallharper&quot;&gt;cristallharper&lt;/h2&gt;

&lt;p&gt;这位美国犹他州的画家在 Ins 上的介绍是：Wife. Painter. Dog-lover. Utahn. Scorpio. Soap-maker.&lt;/p&gt;

&lt;p&gt;蛮有趣的，她还专门有个网站卖肥皂。当然，也可以在她的&lt;a href=&quot;http://www.cristallharper.com/paintings/&quot;&gt;个人网站&lt;/a&gt;上看到她的画作。主要包括植物、动物(各种狗狗)和海景。我这里都是贴的她画的狗狗，抛开技法不论，从她的画作能强烈感受到她所倾注的喜爱，真是个不折不扣的 Dog-lover。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/cristallharper/01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/cristallharper/02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/cristallharper/03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/cristallharper/04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;alicavanaugh&quot;&gt;&lt;em&gt;alicavanaugh&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;这一位可以说是这次介绍里面最具特点，艺术水准最高的了。常年在世界各地办个人画展，还做艺术培训，价格是100刀一小时。她的&lt;a href=&quot;http://www.alicavanaugh.com/&quot;&gt;网站&lt;/a&gt;有画出售，当然价格不菲。&lt;/p&gt;

&lt;p&gt;她喜欢画小孩，特点是让颜料在画上自然(其实会为了控制未干的颜料流向而倾斜画板)晕开，产生一种水渍的效果，使画面传递出来的氛围非常奇妙，初见的时候简直有 冲击力。&lt;/p&gt;

&lt;p&gt;比如这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/alicavanaugh/01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/alicavanaugh/02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;她的功底实在是深厚，我翻看了早期写实作品，那色彩就已经十分细腻了。而这种独特风格里面对颜料的把控能力，简直爆炸。&lt;/p&gt;

&lt;p&gt;她有一个可爱的女儿，有时她会把画到一半的画丢给女儿随便涂鸦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/alicavanaugh/03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时，她也简单画几笔：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/alicavanaugh/04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;beebooties&quot;&gt;beebooties&lt;/h2&gt;

&lt;p&gt;这位插画家非常爱猫。可爱的卡通画风记录自己生活的喜怒哀乐。出场人物主要有：插画家本人，她的丈夫和她的猫们。&lt;/p&gt;

&lt;p&gt;她的一只猫长这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每一张都非常生动，情绪都鲜明，让人忍俊不禁：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/05.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/06.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/07.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/08.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/09.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-07-12/beebooties/14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;整理起来花的时间比想象中的久呢。还是蛮开心的一件事情。要给自己说声晚安了。&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jul 2016 19:43:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/07/12/Instagram-Illustrators/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/07/12/Instagram-Illustrators/</guid>
        
        <category>绘画</category>
        
        
      </item>
    
      <item>
        <title>KVM学习笔记</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;从杭州回到了重庆，很快又要去上海。&lt;/p&gt;

&lt;p&gt;事先声明：这篇博客可能不适合阅读。我想利用短短假期里的一些时间尽量有效地学习一下KVM，基本是从零开始，用笔记的形式督促一下自己，也算加深印象。至于这种完全顺着自己思路来的东西是否对别人有帮助…留作以后考量吧。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;学习资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.evernote.com/shard/s325/sh/bebe0aaa-9d30-4624-9772-a0af9dfffead/a08905a6b6733c5cd945bba560d4d927&quot;&gt;QEMU+KVM学习笔记&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt&quot;&gt;The Definitive KVM (Kernel-based Virtual Machine) API Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://smilejay.com/kvm_theory_practice/&quot;&gt;KVM虚拟化原理与实践&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lwn.net/Articles/436781/&quot;&gt;Native Linux KVM Tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html/&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://people.cs.nctu.edu.tw/~chenwj/dokuwiki/doku.php?id=kvm&quot;&gt;KVM-韦任的维基百科&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;6月29日&lt;/h2&gt;

&lt;p&gt;一般认为，虚拟机监控的实现有两类：监控模型(Hypervisor)和宿主机模型(Host-based)。由于监控模型需要进行处理器调度，还需要实现各种驱动程序，以支持运行其上的虚拟机，因此实现难度要大于宿主机模型。KVM的实现采用后者。&lt;/p&gt;

&lt;h4 id=&quot;kvm-&quot;&gt;KVM 工作原理&lt;/h4&gt;

&lt;p&gt;KVM的基本工作原理：用户模式的Qemu利用接口libkvm通过ioctl系统调用进入内核模式。KVM Driver 为虚拟机创建虚拟内存和虚拟CPU后执行 VMLAUCH 指令进入客户模式。装载 Guest OS 执行。如果 Guest OS 发生外部中断或者影子页表缺页之类的事件，暂停 Guest OS 的执行，退出客户模式进行一些必要的处理。然后重新进入客户模式，执行客户代码。如果发生I/O事件或者信号队列中有信号到达，就会进入用户模式处理。&lt;/p&gt;

&lt;h4 id=&quot;kvm--1&quot;&gt;KVM 的内存管理&lt;/h4&gt;

&lt;p&gt;KVM使用影子页表实现客户物理地址到主机物理地址的转换。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;小结&lt;/h4&gt;

&lt;p&gt;这一天主要了解了一些 KVM 的基本概念。包括工作原理，功能组成，代码结构等。后面准备自己搭建一个 KVM。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;6月30日&lt;/h2&gt;

&lt;h4 id=&quot;kvm--2&quot;&gt;KVM 创建和运行虚拟机的流程&lt;/h4&gt;

&lt;p&gt;KVM 虚拟机创建和运行分为用户态和内核态两个部分。用户态主要提供应用接口，为虚拟机创建上下文环境，在 libkvm 中提供访问内核字符设备&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/kvm&lt;/code&gt;的接口；内核态为添加到内核中的字符设备&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/kvm&lt;/code&gt;，模块加载进内核后即可进行接口用户空间调用创建虚拟机。在创建虚拟机的过程中，KVM 字符设备主要为客户机创建 KVM 数据结构。&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Jun 2016 08:00:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/06/28/KVM-Learning-Notes/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/06/28/KVM-Learning-Notes/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>使用AWS搭建自己的VPN</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;这一篇博客记录关于自己搭建VPN的内容。&lt;strong&gt;但是&lt;/strong&gt;，我并不想写太多细节方面的东西，&lt;a href=&quot;#build&quot;&gt;后文&lt;/a&gt;列出了很详细的教程，之前我自己也是照着这些教程来做的。&lt;/p&gt;

&lt;p&gt;我想就写一写照着教程，踩着一些坑，最后好歹成功搭建起VPN这个过程，自己逐渐形成的“哦，这个原来大概就是这么个玩意儿”一般的认识。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;原理&lt;/h2&gt;

&lt;p&gt;简单来说，我们之所以需要使用 VPN ，是因为我们需要加密数据来避免GFW的封锁。&lt;/p&gt;

&lt;h4 id=&quot;gfw-&quot;&gt;GFW 简单说明&lt;/h4&gt;

&lt;p&gt;GFW 的封锁主要包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关键字过滤&lt;/li&gt;
  &lt;li&gt;IP封锁&lt;/li&gt;
  &lt;li&gt;DNS污染、劫持&lt;/li&gt;
  &lt;li&gt;特定端口封锁&lt;/li&gt;
  &lt;li&gt;加密连接干扰&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而之所以其能够进行封锁，是因为网络协议的数据包头部是明文的，加密连接HTTPS的公钥也是明文的。如果在跨境传输过程中有某种加密手段，那么监视和封锁便无从谈起了。&lt;/p&gt;

&lt;h4 id=&quot;vpn-&quot;&gt;VPN 简单说明&lt;/h4&gt;

&lt;p&gt;VPN(virtual private network) 能够将私有网络如局域网连接到公共网络或互联网上，用户可以通过连接到私有网络的设备访问公共网络或互联网&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_network&quot;&gt;(wiki)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-06-10/vpn-mechanic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说, VPN 能够让你的设备远程连接到一台主机上，通过这台主机访问互联网，而你的设备和这台主机之间的数据传输是经过加密的。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实现&lt;/h2&gt;

&lt;p&gt;要实现 VPN 的搭建我们需要准备：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一台不受封锁的服务器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;以及一种与这台服务器通信的、加密的数据传输协议&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么下文就再继续讲这两方面的内容。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;服务器&lt;/h4&gt;
&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;

&lt;p&gt;服务器方面，推荐亚马逊的&lt;a href=&quot;https://aws.amazon.com/cn/&quot;&gt;AWS&lt;/a&gt;, 新用户可以免费使用一年。&lt;/p&gt;

&lt;p&gt;申请教程在&lt;a href=&quot;http://bbs.ngacn.cc/read.php?tid=7298878&quot;&gt;这里&lt;/a&gt;写得非常详细。&lt;/p&gt;

&lt;p&gt;关于AWS有一些值得注意的地方：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;免费申请的服务器是有适用范围的，超出部分需要付费，务必谨慎操作；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免额外开销的TIPS:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;在网上购买虚拟信用卡用于认证，这样即使产生了费用也不会扣到你的钱&lt;/li&gt;
        &lt;li&gt;注意同时只运行一个实例，保证时间不超过上限&lt;/li&gt;
        &lt;li&gt;不用的实例记得及时关闭，解除绑定的IP及时删除(我因为这个扣了几美分)&lt;/li&gt;
        &lt;li&gt;时常登录控制台查看自己的账单&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;可以选择服务器实例区域，建议选东京，我现在用着很流畅，最开始选的美国延时很高&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-4&quot;&gt;协议&lt;/h4&gt;

&lt;h5 id=&quot;section-5&quot;&gt;隧道技术&lt;/h5&gt;

&lt;p&gt;隧道技术的基本过程是在源局域网与公网的接口处将数据(可以是ISO七层模型中的数据链路层或网络层数据)作为负载封装在一种可以在公网上传输的数据格式中，在目的局域网与公网的接口处将数据解封装，取出负载。被封装的数据包在互联网上传递时所经过的逻辑路径被称为“隧道”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-06-10/vpn-protocal.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前VPN隧道协议主要有4种：点到点隧道协议PPTP、第二层隧道协议L2TP、网络层隧道协议IPSec以及SOCKS v5。各种协议的特点有兴趣可以自己了解一下。&lt;/p&gt;

&lt;p&gt;比如，打开ios的新建 VPN 选项，可以看到这样的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-06-10/vpn-options.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中这个 IKEv2 是一个新版的安全协议，应该是今后发展的趋势。我现在使用的是 PPTP 协议，&lt;a href=&quot;#build&quot;&gt;上面&lt;/a&gt;教程中也有详细介绍。PPTP协议比较简单，容易被识别，比如如果我使用校园网就连不上。感觉ios里 VPN 协议是按照推荐顺序排列的。最为稳定的应该是 IKEv2 吧。而且现在 Ubuntu 上能够直接使用 apt-get 安装了，后面我也可以考虑换成 IKEv2 吧。&lt;/p&gt;

&lt;p&gt;最后再给两个教程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/simonjay2007/article/details/7563933&quot;&gt;L2TP/IPSec VPN 架设教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/MjqE7fF&quot;&gt;IPSec/IKEv2 VPN 架设教程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;搭梯子教程到这里就结束了。&lt;/p&gt;

&lt;p&gt;当然 AWS 的用处远不止搭建 VPN 这么一点儿。以后有时间再慢慢发掘吧。&lt;/p&gt;

&lt;p&gt;对了我最喜欢在Ins上关注的插画家们，有空时刷一刷，很多作品都超级耐看。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 20:00:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/06/10/AWS-VPN/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/06/10/AWS-VPN/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>Hello Jekyll</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Hang 也有自己的 Blog 了。
第一篇文章就用来记录 Blog 的搭建过程。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果不是手机摔坏我就不会惦记备忘录里面存的AWS账号密码，如果不是想到了AWS只用来做VPN实在有些浪费我就
不会想着在上面搭个博客。结果呢，查着查着Wordpress不知怎么的就发现了Jekyll，简单了解之后便喜欢上了。
于是乎 —— 基于好多偶然和巧合，很久以拥有自己网站的愿望就从这个 Blog 开始实现了。&lt;/p&gt;

&lt;p&gt;为什么选择用Jekyll，我是这么觉得的：&lt;/p&gt;

&lt;p&gt;如果把个人网站比作自己的房间，那么自己建站便是从头开始盖房子，一砖一瓦都是属于你的，但也都需要你劳神费心；
Blog 服务则是给你一间现成的房间，但是你只能把自己的东西放在指定的位置，房间里也会出现和你无关的物品和你并不期望的访客。&lt;/p&gt;

&lt;p&gt;Jekyll对我来说是一个很好的调和 —— 不必为技术的繁琐担心过多，而当你有心时又会给你足够的自由发挥空间。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;本博客使用 &lt;a href=&quot;http://jekyll.bootcss.com/&quot;&gt;Jekyll&lt;/a&gt; + &lt;a href=&quot;https://pages.GitHub.com/&quot;&gt;GitHub Pages&lt;/a&gt; 的技术方案搭建。&lt;/p&gt;

&lt;p&gt;其中 Jekyll 是一个博客形态的静态站点产生器，能够将&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;转换成可以发布的完整网站。使用 Jekyll 来进行本地网站的调试
和 Blog 的发布。&lt;/p&gt;

&lt;p&gt;GitHub Pages 是 &lt;a href=&quot;https://GitHub.com/&quot;&gt;GitHub&lt;/a&gt;  推出的展示自我和项目的网站。你的网站直接托管在自己的 GitHub 仓库上，默认使用GitHub的子域名，通过 Git 命令管理，不用自己捣腾主机，也没有流量和空间限制。
是一个非常理想的展示的空间。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;本地准备&lt;/h3&gt;

&lt;p&gt;接下来要介绍本地的准备，主要以 windows 环境为例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.安装 &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;Ruby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326174105835&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意安装时一定要勾选添加到环境变量！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326174117476&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.安装 &lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;windows下使用zip格式较为方便，将下载的文件解压到任意路径下。打开windows的命令行窗口
(按win+x+a)，输入命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {你的解压地址}
$ ruby setpu.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.安装 Jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在命令行输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
$ gem install jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.配置 Git 环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先安装 &lt;a href=&quot;https://git-for-windows.GitHub.io/&quot;&gt;git for windows&lt;/a&gt;
,完成以后，后续配置需要用到GitHub账号，在后文中介绍。&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;GitHub准备&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.创建自己的 &lt;a href=&quot;https://GitHub.com/&quot;&gt;GitHub&lt;/a&gt; 账号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.设置 git 账号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在本地打开安装好的 Git Bash。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173741565&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;中执行以下命令，设置你的 git 用户名和邮箱：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;{username}&quot;          // 用你的用户名替换{username}
$ git config --global user.email &quot;{name@site.com}&quot;    // 用你的邮箱替换{name@site.com}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.配置SSH&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了和GitHub的远程仓库进行传输，需要配置SSH。在&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;中执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen -t rsa -C&quot;{name@site.com}&quot;    // 用你的邮箱替换{name@site.com}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样在&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\你的计算机用户名&lt;/code&gt;下会生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;文件夹。&lt;/p&gt;

&lt;p&gt;接下来使用浏览器登录你的GitHub账户，点击右上角的”Settings”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173806394&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击“SSH Keys”，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173821144&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用文本编辑器打开&lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;文件，将内容复制粘贴到Key中，
点“Add SSH Key”确定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173829850&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置好SSH之后，便可以在本地使用 git 访问自己的 GitHub 远程仓库了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.创建自己的 GitHub Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub 自动将命名规则为&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yourusername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.github.io&lt;/span&gt;&lt;/code&gt;的仓库识别为 GitHub Pages 项目。简单的
建站方法是挑选一个自己喜欢的&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/sites&quot;&gt;模板&lt;/a&gt;, 将其Fork到
自己的空间。例如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173933085&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在你的主页点开之前Fork的仓库，点击”Settings”,将“Repository name”改为
 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yourusername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.github.io&lt;/span&gt;&lt;/code&gt;，点击“Rename”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326173955662&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成之后便可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;http://{yourusername}.github.io&lt;/code&gt;来访问你Fork的网站啦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.同步仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了方便网站的调试和 Blog 的编辑，我们需要将托管在 GitHub 上的仓库同步到本地计算机上。
再次打开Git Bash，输入以下命令切换到你想放置本地代码仓库的位置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {本地路径}     // 比如：cd e:/workspace
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;clone（克隆）你自己的 GitHub Pages 远程仓库：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/{username}/{username}.github.io.git     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160326174041711&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时所有远程仓库里的源码都拷贝到 &lt;code class=&quot;highlighter-rouge&quot;&gt;e:/workspace/{username}.github.io&lt;/code&gt; 这个文件夹里来了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;正式使用&lt;/h3&gt;

&lt;p&gt;有了前面的准备，现在就可以正式的编辑网站和写 Blog 啦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Jekyll简单使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在终端中输入命令:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {local repository} // {local repository}替换成你的本地仓库的目录
$ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果一切顺利，通过浏览器访问 http://localhost:4000/ 就已经可以看到自己的网站啦。&lt;/p&gt;

&lt;p&gt;注意&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;与&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll serve -watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;功能相似，开启服务后都可以查看网站效果，也能检测到修改。个人感觉差别在于被动刷新和主动
检测上。而Jekyll配置文件_config.yml的改动则需要重启服务才能生效。&lt;/p&gt;

&lt;p&gt;所有的 Blog 放在仓库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_POST&lt;/code&gt; 文件夹下，命名遵循 &lt;code class=&quot;highlighter-rouge&quot;&gt;y-m-d-title.format&lt;/code&gt; 的格式。&lt;/p&gt;

&lt;p&gt;对 Jekyll &lt;a href=&quot;http://jekyll.bootcss.com/docs/usage/&quot;&gt;基本用法&lt;/a&gt;和
&lt;a href=&quot;http://jekyll.bootcss.com/docs/usage/&quot;&gt;目录结构&lt;/a&gt;的更多介绍，需要的时候可以自己查看。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.使用 Git 更新 Blog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;无论是修改网站还是更新 Blog ，都可以通过 Git 命令来完成。打开 Git Bash 切换地址到本地仓库：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {your repository}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果之前使用 Git 与其他远程仓库建立过连接，则需要断开旧的连接连接到我们的 GitHub Pages 仓库：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote rm origin
$ git remote add origin https://github.com/{yourusername}/{yourusername}.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在 Bash 中输入一下命令将本地修改同步到GitHub上:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;statement&quot;   //此处statement填写此次提交修改的内容，作为日后查阅
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;完成后就能在你的主页上看到更新了。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;希望自己能保持一颗纯粹的心，坚持把 Blog 更新下去。&lt;/p&gt;

&lt;p&gt;接下来打算要做的有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;第一点当然是多写一些内容啦；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加一个评论系统；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;完善 Blog 的翻页支持；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加搜索功能；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加数据可视化的支持。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好的，第一篇 Blog 就写到这里啦。评论系统做好以后我会在评论里面更新完成进度。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2016 04:40:00 +0800</pubDate>
        <link>http://zhanhang2014.github.io/2016/06/04/Hello-Jekyll/</link>
        <guid isPermaLink="true">http://zhanhang2014.github.io/2016/06/04/Hello-Jekyll/</guid>
        
        <category>技术</category>
        
        
      </item>
    
  </channel>
</rss>
